#!/usr/bin/env python

"""
Downloads satellite data products for any user-specified date and geolocation location (lat/lon).

Now supports:
    MODIS data: MOD-RGB,  MYD-RGB 
                MOD03,    MYD03 
                MOD02QKM, MYD02QKM
                MOD02HKM, MYD02HKM
                MOD021KM, MYD021KM
                MOD06_L2, MYD06_L2
                MCD43
    VIIRS data: ...
    OCO-2 data: ...

This is a functionality of EaR3T.

Authors:
    Vikas Nataraja
    Hong Chen

Example Usage:
    sdown --date 20210523 --lons 30 35 --lats 0 10 --products mod06_l2 --fdir tmp-data
    sdown --date 20130714 --extent 30 35 0 10 --products modrgb myd02hkm myd06_l2 --fdir tmp-data

To see a demonstration of how this tool works, use:
    sdown --run_demo
"""

import os
import sys
from argparse import ArgumentParser, RawTextHelpFormatter
import numpy as np
import datetime


import er3t

# get width for stdout statements
width = os.get_terminal_size().columns

# set welcome text
description = '===================================================================\n\n'\
              '    Education and Research 3D Radiative Transfer Toolbox (EaR\u00b3T)  \n\n'\
              '===================================================================\n'\
              '============== Satellite Data Product Download Tool ===============\n'\
              'Example Usage:\n'\
              'sdown --date 20210523 --lons 30 35 --lats 0 10 --satellite aqua --products 06_l2 --fdir_out tmp-data\n'\
              'sdown --date 20130714 --extent 30 35 0 10 --satellite terra --products l1b --fdir_out tmp-data\n'

description = '=' * width + '\n\n' + \
              'Education and Research 3D Radiative Transfer Toolbox (EaR\u00b3T)'.center(width) + '\n\n' + \
              '=' * width + '\n' + \
              ' Satellite Data Product Download Tool '.center(width, '=') + '\n\n' + \
              'Example Usage:\n'\
              'sdown --date 20210523 --lons 30 35 --lats 0 10 --satellite aqua --products 06_l2 --fdir_out tmp-data\n'\
              'sdown --date 20130714 --extent 30 35 0 10 --satellite terra --products l1b --fdir_out tmp-data\n'

# product tags
# this <tags_support_> will be updated over time
#/----------------------------------------------------------------------------\#
date_today_str = datetime.date.today().strftime('%d %B, %Y')

tags_support_ = {

        'MODRGB': {
                'dataset_tag': 'MODRGB',
                'dict_key': 'mod_rgb',
                'description': 'Terra MODIS True Color (RGB) Imagery',
                'website': 'https://worldview.earthdata.nasa.gov',
                'satellite': 'Terra',
                'instrument': 'MODIS',
            'acknowledgement': 'We acknowledge the use of imagery from the NASA Worldview application (https://worldview.earthdata.nasa.gov/), part of the NASA Earth Observing System Data and Information System (EOSDIS).',
                },

        'MYDRGB': {
                'dataset_tag': 'MYDRGB',
                'dict_key': 'myd_rgb',
                'description': 'Aqua MODIS True Color (RGB) Imagery',
                'website': 'https://worldview.earthdata.nasa.gov',
                'satellite': 'Aqua',
                'instrument': 'MODIS',
            'acknowledgement': 'We acknowledge the use of imagery from the NASA Worldview application (https://worldview.earthdata.nasa.gov/), part of the NASA Earth Observing System Data and Information System (EOSDIS).',
                },

        'MOD03': {
                'dataset_tag': '61/MOD03',
                'dict_key': 'mod_03',
                'description': 'Terra MODIS Geolocation Fields Product',
                'website': 'http://dx.doi.org/10.5067/MODIS/MOD03.061',
                'satellite': 'Terra',
                'instrument': 'MODIS',
                'reference': 'MODIS Characterization Support Team: MODIS Geolocation Fields Product, NASA MODIS Adaptive Processing System [data set], Goddard Space Flight Center, USA, http://dx.doi.org/10.5067/MODIS/MOD03.061 (last access: %s), 2017.' % date_today_str,
                },

        'MYD03': {
                'dataset_tag': '61/MYD03',
                'dict_key': 'myd_03',
                'description': 'Aqua MODIS Geolocation Fields Product',
                'website': 'http://dx.doi.org/10.5067/MODIS/MYD03.061',
                'satellite': 'Aqua',
                'instrument': 'MODIS',
                'reference': 'MODIS Characterization Support Team: MODIS Geolocation Fields Product, NASA MODIS Adaptive Processing System [data set], Goddard Space Flight Center, USA, http://dx.doi.org/10.5067/MODIS/MYD03.061 (last access: %s), 2017.' % date_today_str,
                },

        'MOD02QKM': {
                'dataset_tag': '61/MOD02QKM',
                'dict_key': 'mod_02',
                'description': 'Terra MODIS Level 1b (250m) Calibrated Radiances Product',
                'website': 'http://dx.doi.org/10.5067/MODIS/MOD02QKM.061',
                'satellite': 'Terra',
                'instrument': 'MODIS',
                'reference': 'MODIS Characterization Support Team: MODIS 250m Calibrated Radiances Product, NASA MODIS Adaptive Processing System [data set], Goddard Space Flight Center, USA, http://dx.doi.org/10.5067/MODIS/MOD02QKM.061 (last access: %s), 2017.' % date_today_str,
                },

        'MYD02QKM': {
                'dataset_tag': '61/MYD02QKM',
                'dict_key': 'myd_02',
                'description': 'Aqua MODIS Level 1b (250m) Calibrated Radiances Product',
                'website': 'http://dx.doi.org/10.5067/MODIS/MYD02QKM.061',
                'satellite': 'Aqua',
                'instrument': 'MODIS',
                'reference': 'MODIS Characterization Support Team: MODIS 250m Calibrated Radiances Product, NASA MODIS Adaptive Processing System [data set], Goddard Space Flight Center, USA, http://dx.doi.org/10.5067/MODIS/MYD02QKM.061 (last access: %s), 2017.' % date_today_str,
                },

        'MOD02HKM': {
                'dataset_tag': '61/MOD02HKM',
                'dict_key': 'mod_02',
                'description': 'Terra MODIS Level 1b (500m) Calibrated Radiances Product',
                'website': 'http://dx.doi.org/10.5067/MODIS/MOD02HKM.061',
                'satellite': 'Terra',
                'instrument': 'MODIS',
                'reference': 'MODIS Characterization Support Team: MODIS 500m Calibrated Radiances Product, NASA MODIS Adaptive Processing System [data set], Goddard Space Flight Center, USA, http://dx.doi.org/10.5067/MODIS/MOD02HKM.061 (last access: %s), 2017.' % date_today_str,
                },

        'MYD02HKM': {
                'dataset_tag': '61/MYD02HKM',
                'dict_key': 'myd_02',
                'description': 'Aqua MODIS Level 1b (250m) Calibrated Radiances Product',
                'website': 'http://dx.doi.org/10.5067/MODIS/MYD02HKM.061',
                'satellite': 'Aqua',
                'instrument': 'MODIS',
                'reference': 'MODIS Characterization Support Team: MODIS 500m Calibrated Radiances Product, NASA MODIS Adaptive Processing System [data set], Goddard Space Flight Center, USA, http://dx.doi.org/10.5067/MODIS/MYD02HKM.061 (last access: %s), 2017.' % date_today_str,
                },

        'MOD021KM': {
                'dataset_tag': '61/MOD021KM',
                'dict_key': 'mod_02',
                'description': 'Terra MODIS Level 1b (1km) Calibrated Radiances Product',
                'website': 'http://dx.doi.org/10.5067/MODIS/MOD021KM.061',
                'satellite': 'Terra',
                'instrument': 'MODIS',
                'reference': 'MODIS Characterization Support Team: MODIS 1km Calibrated Radiances Product, NASA MODIS Adaptive Processing System [data set], Goddard Space Flight Center, USA, http://dx.doi.org/10.5067/MODIS/MOD021KM.061 (last access: %s), 2017.' % date_today_str,
                },

        'MYD021KM': {
                'dataset_tag': '61/MYD02HKM',
                'dict_key': 'myd_02',
                'description': 'Aqua MODIS Level 1b (1km) Calibrated Radiances Product',
                'website': 'http://dx.doi.org/10.5067/MODIS/MYD021KM.061',
                'satellite': 'Aqua',
                'instrument': 'MODIS',
                'reference': 'MODIS Characterization Support Team: MODIS 1km Calibrated Radiances Product, NASA MODIS Adaptive Processing System [data set], Goddard Space Flight Center, USA, http://dx.doi.org/10.5067/MODIS/MYD021KM.061 (last access: %s), 2017.' % date_today_str,
                },

        'MOD06_L2': {
                'dataset_tag': '61/MOD06_L2',
                'dict_key': 'mod_l2',
                'description': 'Terra MODIS Atmosphere L2 Cloud Product',
                'website': 'http://dx.doi.org/10.5067/MODIS/MOD06_L2.061',
                'satellite': 'Terra',
                'instrument': 'MODIS',
                'reference': 'Platnick, S., Ackerman, S. A., King, M. D. , Meyer, K., Menzel, W. P. , Holz, R. E., Baum, B. A., and Yang, P., 2015: MODIS atmosphere L2 cloud product (06_L2), NASA MODIS Adaptive Processing System [data set], Goddard Space Flight Center, USA, http://dx.doi.org/10.5067/MODIS/MOD06_L2.061 (last access: %s), 2015.' % date_today_str,
                },

        'MYD06_L2': {
                'dataset_tag': '61/MYD06_L2',
                'dict_key': 'myd_02',
                'description': 'Aqua MODIS Atmosphere L2 Cloud Product',
                'website': 'http://dx.doi.org/10.5067/MODIS/MYD06_L2.061',
                'satellite': 'Aqua',
                'instrument': 'MODIS',
                'reference': 'Platnick, S., Ackerman, S. A., King, M. D. , Meyer, K., Menzel, W. P. , Holz, R. E., Baum, B. A., and Yang, P., 2015: MODIS atmosphere L2 cloud product (06_L2), NASA MODIS Adaptive Processing System [data set], Goddard Space Flight Center, USA, http://dx.doi.org/10.5067/MODIS/MOD06_L2.061 (last access: %s), 2015.' % date_today_str,
                },

        'MCD43A3': {
                'dataset_tag': '61/MCD43A3',
                'dict_key': 'mod_43',
                'description': 'MODIS BRDF/Albedo L3 Surface Product',
                'website': 'https://doi.org/10.5067/MODIS/MCD43A3.061',
                'satellite': 'Terra & Aqua',
                'instrument': 'MODIS',
                'reference': 'Schaaf, C., and Wang, Z.: MODIS/Terra+Aqua BRDF/Albedo Daily L3 Global - 500m V061, NASA EOSDIS Land Processes DAAC [data set], https://doi.org/10.5067/MODIS/MCD43A3.061 (last access: %s), 2021.' % date_today_str,
                },

        'oco2_L1bScND': {
                'dataset_tag': 'oco2_L1bScND',
                'dict_key': 'oco_l1b',
                'description': 'OCO-2 L1B Calibrated Radiances Product',
                'website': 'https://doi.org/10.5067/6O3GEUK7U2JG',
                'satellite': 'OCO-2',
                'instrument': 'OCO-2',
                'reference': 'OCO-2 Science Team/Gunson, M., and Eldering, A.: OCO-2 Level 1B calibrated, geolocated science spectra, Retrospective Processing V10r, Goddard Earth Sciences Data and Information Services Center (GES DISC) [data set], Greenbelt, MD, USA, https://doi.org/10.5067/6O3GEUK7U2JG (last access: %s), 2019.' % date_today_str,
                },

        'oco2_L2MetND': {
                'dataset_tag':    'oco2_L2MetND',
                'dict_key':    'oco_met_l2',
                'description': 'OCO-2 L2 Meteorological Parameters Product',
                'website':     'https://doi.org/10.5067/OJZZW0LIGSDH',
                'satellite':   'OCO-2',
                'instrument':  'OCO-2',
                'reference':   'OCO-2 Science Team/Gunson, M., and Eldering, A.: OCO-2 Level 2 meteorological parameters interpolated from global assimilation model for each sounding, Retrospective Processing V10r, Goddard Earth Sciences Data and Information Services Center (GES DISC) [data set], Greenbelt, MD, USA, https://doi.org/10.5067/OJZZW0LIGSDH (last access: %s), 2019.' % date_today_str,
                },

        'oco2_L2StdND': {
                'dataset_tag': 'oco2_L2StdND',
                'dict_key': 'oco_ret_l2',
                'description': 'OCO-2 L2 XCO2 Retrieval Product',
                'website': 'https://doi.org/10.5067/6SBROTA57TFH',
                'satellite': 'OCO-2',
                'instrument': 'OCO-2',
                'reference': 'OCO-2 Science Team/Gunson, M., and Eldering, A.: OCO-2 Level 2 geolocated XCO2 retrievals results, physical model, Retrospective Processing V10r, Goddard Earth Sciences Data and Information Services Center (GES DISC) [data set], Greenbelt, MD, USA, https://doi.org/10.5067/6SBROTA57TFH (last access: %s), 2020.' % date_today_str,
                },

        }
#\----------------------------------------------------------------------------/#


class SatelliteDownload:

    def __init__(
            self,
            date=None,
            extent=None,
            lons=None,
            lats=None,
            fdir_out=None,
            products=None,
            verbose=False):

        # Error handling
        if len(products) == 0:
            sys.exit('\nError [sdown]: Please specify a product to download. We currently support %s\n' % product_options)

        if (extent is None) and ((lats is None) or (lons is None)):
            sys.exit('\nError [sdown]: Must provide either extent or lon/lat coordinates\n')
        elif (extent is None) and ((len(lats) == 2) and (len(lons) == 2)) and (lons[0] < lons[1]) and (lats[0] < lats[1]):
            self.extent = [lons[0], lons[1], lats[0], lats[1]]
        elif (len(extent) == 4) and ((lats is None) and (lons is None)):
            self.extent = extent
        else:
            sys.exit('\nError [sdown]: The provided lon/lat coordinates are incorrect, check again\n')

        if (extent[0] >= extent[1]) or (extent[2] >= extent[3]):
            msg = '\nError [sdown]: The given extents of lon/lat are incorrect: %s.\nPlease check to make sure extent is passed as `lon1 lon2 lat1 lat2` format i.e. West, East, South, North.\n' % self.extent
            sys.exit(msg)

        if not os.path.exists(fdir_out):
            os.makedirs(fdir_out)
            if verbose:
                print('\nMessage [sdown]: Created %s. Files will be downloaded to this directory\n' % fdir_out)

        self.date = datetime.datetime(int(date[:4]), int(date[4:6]), int(date[6:8]))
        self.products  = products
        self.fdir_out  = fdir_out
        self.verbose   = verbose

        self.run()


    def run(self):

        lon0 = np.linspace(self.extent[0], self.extent[1], 100)
        lat0 = np.linspace(self.extent[2], self.extent[3], 100)
        lon, lat = np.meshgrid(lon0, lat0, indexing='ij')


        # add product IDs
        self.fnames = {}
        for product in self.products:

            product_info = get_sat_info_from_product_tag(product)
            self.fnames[product_info['dict_key']] = []
            if self.verbose:
                stdout = '=' * width + '\n\n%s\n' % product_info['description'].center(width)
                print(stdout)

            # MODIS RGB imagery
            if 'RGB' in product.upper():
                fnames = [er3t.util.download_worldview_rgb(date=self.date, 
                                                           extent=self.extent, 
                                                           fdir_out=self.fdir_out, 
                                                           satellite=product_info['satellite'], 
                                                           instrument=product_info['instrument'], 
                                                           coastline=True)]
                self.fnames[product_info['dict_key']] += fnames

            # MODIS surface product
            elif '43' in product.upper():
                filename_tags_43 = er3t.util.get_sinusoidal_grid_tag(lon, lat)
                for filename_tag in filename_tags_43:
                    fnames = er3t.util.download_laads_https(date=self.date, 
                                                            dataset_tag=product_info['dataset_tag'], 
                                                            filename_tag=filename_tag, 
                                                            day_interval=1, 
                                                            fdir_out=self.fdir_out, 
                                                            verbose=self.verbose)
                    self.fnames[product_info['dict_key']] += fnames

            # MODIS Level-1b radiances, Level-2 cloud products, and solar/viewing geoemetries
            elif product.upper().endswith(('QKM', 'HKM', '1KM', '06_L2', '03')):
                filename_tags_03 = er3t.util.get_satfile_tag(date=self.date,
                                                             lon=lon,
                                                             lat=lat,
                                                             satellite=product_info['satellite'],
                                                             instrument=product_info['instrument'],
                                                             verbose=self.verbose)
                if self.verbose:
                    print('Message [sdown]: Found %s %s overpasses\n' % (len(filename_tags_03), product_info['satellite']))

                for filename_tag in filename_tags_03:
                    fnames = er3t.util.download_laads_https(date=self.date, 
                                                            dataset_tag=product_info['dataset_tag'], 
                                                            filename_tag=filename_tag, 
                                                            day_interval=1, 
                                                            fdir_out=self.fdir_out, 
                                                            verbose=self.verbose)
                    self.fnames[product_info['dict_key']] += fnames

            else:
                msg = '\nError [sdown]: Cannot recognize satellite product from the given tag <%s>, abort...\nCurrently, only the following satellite products are supported by <sdown>:\n%s' % (product, '\n'.join(tags_support_.keys()))
                raise OSError(msg)
        print('\nMessage [sdown]: Finished downloading MODIS files! You can find them in %s\n' % self.fdir_out)


def get_sat_info_from_product_tag(tag_):

    # make all variable names (keys) upper case
    #/----------------------------------------------------------------------------\#
    tags_support = {}
    for key in tags_support_.keys():
        tags_support[key.upper()] = tags_support_[key]
    #\----------------------------------------------------------------------------/#

    # return satellite product information
    #/----------------------------------------------------------------------------\#
    tag = tag_.upper()
    if (tag in tags_support.keys()):
        return tags_support[tag]
    else:
        msg = '\nError [sdown]: Cannot recognize satellite product from the given tag <%s>, abort...\nCurrently, only the following satellite products are supported by <sdown>:\n%s' % (tag_, '\n'.join(tags_support_.keys()))
        raise OSError(msg)
    #\----------------------------------------------------------------------------/#


    # old
    #/----------------------------------------------------------------------------\#
    # sat_info = {}

    # if any(pattern in tag for pattern in ['MOD']):
    #     sat_info['satellite']  = 'Terra'
    #     sat_info['instrument'] = 'MODIS'
    # elif any(pattern in tag for pattern in ['MYD']):
    #     sat_info['satellite']  = 'Aqua'
    #     sat_info['instrument'] = 'MODIS'
    # elif any(pattern in tag for pattern in ['MCD']):
    #     sat_info['satellite']  = 'Terra and Aqua (Combined)'
    #     sat_info['instrument'] = 'MODIS'
    # elif any(pattern in tag for pattern in ['VNP']):
    #     sat_info['satellite']  = 'Suomi NPP'
    #     sat_info['instrument'] = 'VIIRS'
    # elif any(pattern in tag for pattern in ['VJ102', 'VJ103']):
    #     sat_info['satellite']  = 'NOAA 20'
    #     sat_info['instrument'] = 'VIIRS'
    #     raise OSError(msg)

    # if any(pattern in tag for pattern in ['RGB']):
    #     sat_info['product'] = 'True Color Imagery'
    # elif any(pattern in tag for pattern in ['03']):
    #     sat_info['product'] = 'Geolocation Fields Product'
    # elif any(pattern in tag for pattern in ['02QKM', '02HKM', '021KM']):
    #     sat_info['product'] = 'Calibrated Radiances Product'
    # elif any(pattern in tag for pattern in ['06_L2']):
    #     sat_info['product'] = 'L2 Cloud Product'
    # elif any(pattern in tag for pattern in ['43A1', '43A2', '43A3', '43A4']):
    #     sat_info['product'] = 'Surface BRDF/Albedo Product'

    # return sat_info
    #\----------------------------------------------------------------------------/#


if __name__ == '__main__':

    # sat_info = get_sat_info_from_product_tag('MYD03')
    # print(sat_info)
    # sat_info = get_sat_info_from_product_tag('MOD02QKM')
    # print(sat_info)
    # sat_info = get_sat_info_from_product_tag('MOD06_L2')
    # print(sat_info)
    # sat_info = get_sat_info_from_product_tag('MCD43A3')
    # print(sat_info)

    parser = ArgumentParser(prog='sdown', formatter_class=RawTextHelpFormatter,
                            description=description, usage='%(prog)s [-h] [--help] [-i]')
    parser.add_argument('-f', '--fdir', type=str, metavar='', default='modis-data',
                        help='Directory where the files will be downloaded\n'\
                             'By default, files will be downloaded to \'modis-data\'')
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='Pass --verbose if status of your request should be reported frequently.\n'\
                             'This is disabled by default.')
    parser.add_argument('-r', '--run_demo', action='store_true',
                        help='Pass --run_demo if you would like to run a demonstration of this tool.')
    required = parser.add_argument_group('Required Arguments')
    required.add_argument('-d', '--date', type=str, metavar='',
                        help='Date for which you would like to download data. '\
                        'Use yyyymmdd format.\nExample: --date 20210404')
    required.add_argument('-e', '--extent', nargs='+', type=float, metavar='',
                        help='Extent of region of interest lon1 lon2 lat1 lat2 in West East South North format.\n'\
                                'Example:  --extent -10 -5 25 30')
    required.add_argument('-x', '--lons', nargs='+', type=float, metavar='',
                        help='The west-most and east-most longitudes of the region. Alternative to providing the first two terms in `extent`.\n'\
                                'Example:  --lons -10 -5')
    required.add_argument('-y', '--lats', nargs='+', type=float, metavar='',
                        help='The south-most and north-most latitudes of the region. Alternative to providing the last two terms in `extent`.\n'\
                                'Example:  --lats 25 30')
    required.add_argument('-p', '--products', type=str, nargs='+', metavar='',
                        help='Short prefix (case insensitive) for the product name. Currently supported products are:\n'\
                        '02QKM: Level 1b 250m radiance product\n'\
                        '02HKM: Level 1b 500m radiance product\n'\
                        '021KM: Level 1b 1km radiance product\n'\
                        '03:    Solar/viewing geometry product\n'\
                        '06_L2: Level 2 cloud product\n'\
                        '43:    Level 3 surface product MCD43A3\n'\
                        'RGB:   True-Color RGB imagery, useful for visuzliation'
                        '\nTo download multiple products at a time:\n'\
                        '--product 021km 02hkm 06_l2\n')

    args = parser.parse_args()

    if args.run_demo:
        date      = '20210714'
        extent    = [-79.4, -71.1, 21.6, 25.8]
        lons      = None
        lats      = None
        fdir      = 'tmp-data'
        products  = ['MODRGB', 'MYD02QKM']
        verbose   = 1

        sat0 = SatelliteDownload(date=date,
                                 extent=extent,
                                 lons=lons,
                                 lats=lats,
                                 fdir_out=fdir,
                                 products=products,
                                 verbose=verbose)
    else:
        sat0 = SatelliteDownload(date=args.date,
                                extent=args.extent,
                                lons=args.lons,
                                lats=args.lats,
                                fdir_out=args.fdir,
                                products=args.products,
                                verbose=args.verbose)
