#!/usr/bin/env python

"""
Downloads satellite data products for any user-specified date and geolocation (lat/lon).

Now supports:
    MODIS data: MOD-RGB,  MYD-RGB
                MOD03,    MYD03
                MOD02QKM, MYD02QKM
                MOD02HKM, MYD02HKM
                MOD021KM, MYD021KM
                MOD06_L2, MYD06_L2
                MOD35_L2, MYD35_L2
                MCD43
    VIIRS data: ...
    OCO-2 data: ...

This is a functionality of EaR3T.

Authors:
    Vikas Nataraja
    Hong Chen

Example Usage:
    sdown --date 20210523 --lons 30 35 --lats 0 10 --products mod06_l2 --fdir sat-data --verbose
    sdown --date 20130714 --extent 30 35 0 10 --products modrgb myd02hkm myd06_l2 --fdir sat-data

To see a demonstration of how this tool works, use:
    sdown --run_demo
"""

import os
import sys
from argparse import ArgumentParser, RawTextHelpFormatter
import numpy as np
import datetime


import er3t

# get width for stdout statements
_width_ = os.get_terminal_size().columns

# set welcome text
_description_ = '=' * _width_ + '\n\n' + \
                'Education and Research 3D Radiative Transfer Toolbox (EaR\u00b3T)'.center(_width_) + '\n\n' + \
                '=' * _width_ + '\n' + \
                ' Satellite Data Product Download Tool '.center(_width_, '=') + '\n\n' + \
                'Example Usage:\n'\
                'sdown --date 20210523 --lons 30 35 --lats 0 10 --products MOD06_L2 --fdir_out sat-data --verbose\n'\
                'sdown --date 20130714 --extent 30 35 0 10 --products MODRGB MYD02QKM --fdir_out sat-data\n'


# product tags
# this <_sat_tags_support_> will be updated over time
#/----------------------------------------------------------------------------\#
_date_today_ = datetime.date.today().strftime('%d %B, %Y')

_sat_tags_support_ = {

        'MODRGB': {
                'dataset_tag': 'MODRGB',
                   'dict_key': 'mod_rgb',
                'description': 'Terra MODIS True Color (RGB) Imagery',
                    'website': 'https://worldview.earthdata.nasa.gov',
                  'satellite': 'Terra',
                 'instrument': 'MODIS',
                  'reference': 'We acknowledge the use of imagery from the NASA Worldview application (https://worldview.earthdata.nasa.gov/), part of the NASA Earth Observing System Data and Information System (EOSDIS).',
                },

        'MYDRGB': {
                'dataset_tag': 'MYDRGB',
                   'dict_key': 'myd_rgb',
                'description': 'Aqua MODIS True Color (RGB) Imagery',
                    'website': 'https://worldview.earthdata.nasa.gov',
                  'satellite': 'Aqua',
                 'instrument': 'MODIS',
                  'reference': 'We acknowledge the use of imagery from the NASA Worldview application (https://worldview.earthdata.nasa.gov/), part of the NASA Earth Observing System Data and Information System (EOSDIS).',
                },

        'MOD03': {
                'dataset_tag': '61/MOD03',
                   'dict_key': 'mod_03',
                'description': 'Terra MODIS Geolocation Fields Product',
                    'website': 'http://dx.doi.org/10.5067/MODIS/MOD03.061',
                  'satellite': 'Terra',
                 'instrument': 'MODIS',
                  'reference': 'MODIS Characterization Support Team: MODIS Geolocation Fields Product, NASA MODIS Adaptive Processing System [data set], Goddard Space Flight Center, USA, http://dx.doi.org/10.5067/MODIS/MOD03.061 (last access: %s), 2017.' % _date_today_,
                },

        'MYD03': {
                'dataset_tag': '61/MYD03',
                   'dict_key': 'myd_03',
                'description': 'Aqua MODIS Geolocation Fields Product',
                    'website': 'http://dx.doi.org/10.5067/MODIS/MYD03.061',
                  'satellite': 'Aqua',
                 'instrument': 'MODIS',
                  'reference': 'MODIS Characterization Support Team: MODIS Geolocation Fields Product, NASA MODIS Adaptive Processing System [data set], Goddard Space Flight Center, USA, http://dx.doi.org/10.5067/MODIS/MYD03.061 (last access: %s), 2017.' % _date_today_,
                },

        'MOD02QKM': {
                'dataset_tag': '61/MOD02QKM',
                   'dict_key': 'mod_02',
                'description': 'Terra MODIS Level 1b (250m) Calibrated Radiances Product',
                    'website': 'http://dx.doi.org/10.5067/MODIS/MOD02QKM.061',
                  'satellite': 'Terra',
                 'instrument': 'MODIS',
                  'reference': 'MODIS Characterization Support Team: MODIS 250m Calibrated Radiances Product, NASA MODIS Adaptive Processing System [data set], Goddard Space Flight Center, USA, http://dx.doi.org/10.5067/MODIS/MOD02QKM.061 (last access: %s), 2017.' % _date_today_,
                },

        'MYD02QKM': {
                'dataset_tag': '61/MYD02QKM',
                   'dict_key': 'myd_02',
                'description': 'Aqua MODIS Level 1b (250m) Calibrated Radiances Product',
                    'website': 'http://dx.doi.org/10.5067/MODIS/MYD02QKM.061',
                  'satellite': 'Aqua',
                 'instrument': 'MODIS',
                  'reference': 'MODIS Characterization Support Team: MODIS 250m Calibrated Radiances Product, NASA MODIS Adaptive Processing System [data set], Goddard Space Flight Center, USA, http://dx.doi.org/10.5067/MODIS/MYD02QKM.061 (last access: %s), 2017.' % _date_today_,
                },

        'MOD02HKM': {
                'dataset_tag': '61/MOD02HKM',
                   'dict_key': 'mod_02',
                'description': 'Terra MODIS Level 1b (500m) Calibrated Radiances Product',
                    'website': 'http://dx.doi.org/10.5067/MODIS/MOD02HKM.061',
                  'satellite': 'Terra',
                 'instrument': 'MODIS',
                  'reference': 'MODIS Characterization Support Team: MODIS 500m Calibrated Radiances Product, NASA MODIS Adaptive Processing System [data set], Goddard Space Flight Center, USA, http://dx.doi.org/10.5067/MODIS/MOD02HKM.061 (last access: %s), 2017.' % _date_today_,
                },

        'MYD02HKM': {
                'dataset_tag': '61/MYD02HKM',
                   'dict_key': 'myd_02',
                'description': 'Aqua MODIS Level 1b (250m) Calibrated Radiances Product',
                    'website': 'http://dx.doi.org/10.5067/MODIS/MYD02HKM.061',
                  'satellite': 'Aqua',
                 'instrument': 'MODIS',
                  'reference': 'MODIS Characterization Support Team: MODIS 500m Calibrated Radiances Product, NASA MODIS Adaptive Processing System [data set], Goddard Space Flight Center, USA, http://dx.doi.org/10.5067/MODIS/MYD02HKM.061 (last access: %s), 2017.' % _date_today_,
                },

        'MOD021KM': {
                'dataset_tag': '61/MOD021KM',
                   'dict_key': 'mod_02',
                'description': 'Terra MODIS Level 1b (1km) Calibrated Radiances Product',
                    'website': 'http://dx.doi.org/10.5067/MODIS/MOD021KM.061',
                  'satellite': 'Terra',
                 'instrument': 'MODIS',
                  'reference': 'MODIS Characterization Support Team: MODIS 1km Calibrated Radiances Product, NASA MODIS Adaptive Processing System [data set], Goddard Space Flight Center, USA, http://dx.doi.org/10.5067/MODIS/MOD021KM.061 (last access: %s), 2017.' % _date_today_,
                },

        'MYD021KM': {
                'dataset_tag': '61/MYD021KM',
                   'dict_key': 'myd_02',
                'description': 'Aqua MODIS Level 1b (1km) Calibrated Radiances Product',
                    'website': 'http://dx.doi.org/10.5067/MODIS/MYD021KM.061',
                  'satellite': 'Aqua',
                 'instrument': 'MODIS',
                  'reference': 'MODIS Characterization Support Team: MODIS 1km Calibrated Radiances Product, NASA MODIS Adaptive Processing System [data set], Goddard Space Flight Center, USA, http://dx.doi.org/10.5067/MODIS/MYD021KM.061 (last access: %s), 2017.' % _date_today_,
                },

        'MOD06_L2': {
                'dataset_tag': '61/MOD06_L2',
                   'dict_key': 'mod_l2',
                'description': 'Terra MODIS Atmosphere L2 Cloud Product',
                    'website': 'http://dx.doi.org/10.5067/MODIS/MOD06_L2.061',
                  'satellite': 'Terra',
                 'instrument': 'MODIS',
                  'reference': 'Platnick, S., Ackerman, S. A., King, M. D. , Meyer, K., Menzel, W. P. , Holz, R. E., Baum, B. A., and Yang, P., 2015: MODIS atmosphere L2 cloud product (06_L2), NASA MODIS Adaptive Processing System [data set], Goddard Space Flight Center, USA, http://dx.doi.org/10.5067/MODIS/MOD06_L2.061 (last access: %s), 2015.' % _date_today_,
                },

        'MYD06_L2': {
                'dataset_tag': '61/MYD06_L2',
                   'dict_key': 'myd_l2',
                'description': 'Aqua MODIS Atmosphere L2 Cloud Product',
                    'website': 'http://dx.doi.org/10.5067/MODIS/MYD06_L2.061',
                  'satellite': 'Aqua',
                 'instrument': 'MODIS',
                  'reference': 'Platnick, S., Ackerman, S. A., King, M. D. , Meyer, K., Menzel, W. P. , Holz, R. E., Baum, B. A., and Yang, P., 2015: MODIS atmosphere L2 cloud product (06_L2), NASA MODIS Adaptive Processing System [data set], Goddard Space Flight Center, USA, http://dx.doi.org/10.5067/MODIS/MOD06_L2.061 (last access: %s), 2015.' % _date_today_,
                },

        'MOD35_L2': {
                'dataset_tag': '61/MOD35_L2',
                   'dict_key': 'mod_l2',
                'description': 'Terra MODIS Atmosphere L2 Cloud Mask',
                    'website': 'http://dx.doi.org/10.5067/MODIS/MOD35_L2.061',
                  'satellite': 'Terra',
                 'instrument': 'MODIS',
                  'reference': 'Ackerman, S., P. Menzel, R. Frey, B.Baum, 2017. MODIS Atmosphere L2 Cloud Mask Product. NASA MODIS Adaptive Processing System, Goddard Space Flight Center, [doi:10.5067/MODIS/MOD35_L2.061'
                },

        'MYD35_L2': {
                'dataset_tag': '61/MYD35_L2',
                   'dict_key': 'myd_l2',
                'description': 'Aqua MODIS Atmosphere L2 Cloud Mask',
                    'website': 'http://dx.doi.org/10.5067/MODIS/MYD35_L2.061',
                  'satellite': 'Aqua',
                 'instrument': 'MODIS',
                  'reference': 'Ackerman, S., P. Menzel, R. Frey, B.Baum, 2017. MODIS Atmosphere L2 Cloud Mask Product. NASA MODIS Adaptive Processing System, Goddard Space Flight Center, [doi:10.5067/MODIS/MYD35_L2.061]'
                },

        'MCD43A3': {
                'dataset_tag': '61/MCD43A3',
                   'dict_key': 'mod_43',
                'description': 'MODIS BRDF/Albedo L3 Surface Product',
                    'website': 'https://doi.org/10.5067/MODIS/MCD43A3.061',
                  'satellite': 'Terra & Aqua',
                 'instrument': 'MODIS',
                  'reference': 'Schaaf, C., and Wang, Z.: MODIS/Terra+Aqua BRDF/Albedo Daily L3 Global - 500m V061, NASA EOSDIS Land Processes DAAC [data set], https://doi.org/10.5067/MODIS/MCD43A3.061 (last access: %s), 2021.' % _date_today_,
                },

        'oco2_L1bScND': {
                'dataset_tag': 'oco2_L1bScND',
                   'dict_key': 'oco_l1b',
                'description': 'OCO-2 L1B Calibrated Radiances Product',
                    'website': 'https://doi.org/10.5067/6O3GEUK7U2JG',
                  'satellite': 'OCO-2',
                 'instrument': 'OCO-2',
                  'reference': 'OCO-2 Science Team/Gunson, M., and Eldering, A.: OCO-2 Level 1B calibrated, geolocated science spectra, Retrospective Processing V10r, Goddard Earth Sciences Data and Information Services Center (GES DISC) [data set], Greenbelt, MD, USA, https://doi.org/10.5067/6O3GEUK7U2JG (last access: %s), 2019.' % _date_today_,
                },

        'oco2_L2MetND': {
                'dataset_tag': 'oco2_L2MetND',
                   'dict_key': 'oco_met_l2',
                'description': 'OCO-2 L2 Meteorological Parameters Product',
                    'website': 'https://doi.org/10.5067/OJZZW0LIGSDH',
                  'satellite': 'OCO-2',
                 'instrument': 'OCO-2',
                  'reference': 'OCO-2 Science Team/Gunson, M., and Eldering, A.: OCO-2 Level 2 meteorological parameters interpolated from global assimilation model for each sounding, Retrospective Processing V10r, Goddard Earth Sciences Data and Information Services Center (GES DISC) [data set], Greenbelt, MD, USA, https://doi.org/10.5067/OJZZW0LIGSDH (last access: %s), 2019.' % _date_today_,
                },

        'oco2_L2StdND': {
                'dataset_tag': 'oco2_L2StdND',
                   'dict_key': 'oco_ret_l2',
                'description': 'OCO-2 L2 XCO2 Retrieval Product',
                    'website': 'https://doi.org/10.5067/6SBROTA57TFH',
                  'satellite': 'OCO-2',
                 'instrument': 'OCO-2',
                  'reference': 'OCO-2 Science Team/Gunson, M., and Eldering, A.: OCO-2 Level 2 geolocated XCO2 retrievals results, physical model, Retrospective Processing V10r, Goddard Earth Sciences Data and Information Services Center (GES DISC) [data set], Greenbelt, MD, USA, https://doi.org/10.5067/6SBROTA57TFH (last access: %s), 2020.' % _date_today_,
                },

        }
#\----------------------------------------------------------------------------/#


def satellite_download(date, start_date, end_date, extent, lons, lats, fdir_out, products, verbose):


    # Error handling
    if products is None:
        sys.exit('\nError [sdown]: Please specify a product to download. \nWe currently support the following:\n%s\n' % ('\n'.join(_sat_tags_support_.keys())))

    if (extent is None) and ((lats is None) or (lons is None)):
        sys.exit('\nError [sdown]: Must provide either extent or lon/lat coordinates\n')

    elif (extent is not None) and (len(extent) != 4) and ((lats is None) or (lons is None) or (len(lats) == 0) or (len(lons) == 0)):
        sys.exit('\nError [sdown]: Must provide either extent with [lon1 lon2 lat1 lat2] or lon/lat coordinates via --lons and --lats\n')

    elif (extent is None) and (lats is not None) and (lons is not None) and ((len(lats) == 2) and (len(lons) == 2)) and (lons[0] < lons[1]) and (lats[0] < lats[1]):
        extent = [lons[0], lons[1], lats[0], lats[1]]

    
    # check to make sure extent is correct
    if (extent[0] >= extent[1]) or (extent[2] >= extent[3]):
        msg = '\nError [sdown]: The given extents of lon/lat are incorrect: %s.\nPlease check to make sure extent is passed as `lon1 lon2 lat1 lat2` format i.e. West, East, South, North.\n' % extent
        sys.exit(msg)

    if not os.path.exists(fdir_out):
        os.makedirs(fdir_out)
        if verbose:
            print('\nMessage [sdown]: Created %s. Files will be downloaded to this directory and structured by date\n' % fdir_out)


    # error handling for dates
    if (date is None) and ((start_date is None) or (end_date is None)):
        sys.exit('\nError [sdown]: Please provide a date via --date or date range via --start_date and --end_date\n')

    elif (date is not None) and ((start_date is None) or (end_date is None)):
        single_dt = datetime.datetime(int(date[:4]), int(date[4:6]), int(date[6:8]))
        if verbose:
            print('\nMessage [sdown]: Data will be downloaded for %s\n' % single_dt.strftime("%d %B, %Y"))
        
        fdir_out_dt = os.path.join(fdir_out, single_dt.strftime('%Y_%m_%d')) # save files in dirs with dates specified
        if not os.path.exists(fdir_out_dt):
            os.makedirs(fdir_out_dt)
        
        run(single_dt, extent, fdir_out_dt, products, verbose)

    elif (start_date is not None) and (end_date is not None):

        start_dt  = datetime.datetime(int(start_date[:4]), int(start_date[4:6]), int(start_date[6:8]))
        end_dt    = datetime.datetime(int(end_date[:4]), int(end_date[4:6]), int(end_date[6:8]))
        if datetime.timedelta((end_dt - start_dt).days).days < 0:
            msg = '\nError [sdown]: `end_date` must be on or after `start_date`.' + \
                  '\n\nReceived start_date: %s\nReceived end_date: %s\n' % (start_dt.strftime("%d %B, %Y"), end_dt.strftime("%d %B, %Y"))
            sys.exit(msg)
        
        if verbose:
            print('\nMessage [sdown]: Data will be downloaded for dates beginning %s to %s\n' % (start_dt.strftime("%d %B, %Y"), end_dt.strftime("%d %B, %Y")))
        
        date_list = [start_dt + datetime.timedelta(days=x) for x in range((end_dt - start_dt).days + 1)]
        for date_x in date_list: # download products date by date
            fdir_out_dt = os.path.join(fdir_out, date_x.strftime('%Y_%m_%d')) # save files in dirs with dates specified
            if not os.path.exists(fdir_out_dt):
                os.makedirs(fdir_out_dt)
            run(date_x, extent, fdir_out_dt, products, verbose)




def run(date, extent, fdir_out, products, verbose):

    lon0 = np.linspace(extent[0], extent[1], 100)
    lat0 = np.linspace(extent[2], extent[3], 100)
    lon, lat = np.meshgrid(lon0, lat0, indexing='ij')

    references = []
    fnames = {}
    for product in products:

        product_info = get_sat_info_from_product_tag(product)
        fnames[product_info['dict_key']] = []

        if verbose:
            stdout = '=' * _width_ + '\n\n%s\n' % product_info['description'].center(_width_)
            print(stdout)

        # MODIS RGB imagery
        if 'RGB' in product.upper():
            p_fnames = [er3t.util.download_worldview_rgb(date=date,
                                                         extent=extent,
                                                         fdir_out=fdir_out,
                                                         satellite=product_info['satellite'],
                                                         instrument=product_info['instrument'],
                                                         coastline=False)]
            fnames[product_info['dict_key']] += p_fnames

        # MODIS surface product
        elif '43' in product.upper():
            filename_tags_43 = er3t.util.get_sinusoidal_grid_tag(lon, lat)
            for filename_tag in filename_tags_43:
                p_fnames = er3t.util.download_laads_https(date=date,
                                                          dataset_tag=product_info['dataset_tag'],
                                                          filename_tag=filename_tag,
                                                          day_interval=1,
                                                          fdir_out=fdir_out,
                                                          verbose=verbose)
                fnames[product_info['dict_key']] += p_fnames

        # MODIS Level-1b radiances, Level-2 cloud products, and solar/viewing geoemetries
        elif product.upper().endswith(('QKM', 'HKM', '1KM', 'L2', '03')):
            filename_tags_03 = er3t.util.get_satfile_tag(date=date,
                                                         lon=lon,
                                                         lat=lat,
                                                         satellite=product_info['satellite'],
                                                         instrument=product_info['instrument'],
                                                         verbose=verbose)
            if verbose:
                print('Message [sdown]: Found %s %s overpasses for %s\n' % (len(filename_tags_03), product_info['satellite'], date.strftime('%B %d, %Y')))

            for filename_tag in filename_tags_03:
                p_fnames = er3t.util.download_laads_https(date=date,
                                                          dataset_tag=product_info['dataset_tag'],
                                                          filename_tag=filename_tag,
                                                          day_interval=1,
                                                          fdir_out=fdir_out,
                                                          verbose=verbose)
                fnames[product_info['dict_key']] += p_fnames

        else:
            msg = '\nError [sdown]: Cannot recognize satellite product from the given tag <%s>, abort...\nCurrently, only the following satellite products are supported by <sdown>:\n%s' % (product, '\n'.join(_sat_tags_support_.keys()))
            raise OSError(msg)

        references.append(product_info['reference'])

    print('The following references were used/downloaded:\n\n%s' % '\n\n'.join(references))
    print('\nMessage [sdown]: Finished downloading satellite files! You can find them in %s\n' % fdir_out)


def get_sat_info_from_product_tag(tag_):

    # make all variable names (keys) upper case
    #/----------------------------------------------------------------------------\#
    tags_support = {}
    for key in _sat_tags_support_.keys():
        tags_support[key.upper()] = _sat_tags_support_[key]
    #\----------------------------------------------------------------------------/#

    # return satellite product information
    #/----------------------------------------------------------------------------\#
    tag = tag_.upper()
    if (tag in tags_support.keys()):
        return tags_support[tag]
    else:
        msg = '\nError [sdown]: Cannot recognize satellite product from the given tag <%s>, abort...\nCurrently, only the following satellite products are supported by <sdown>:\n%s' % (tag_, '\n'.join(_sat_tags_support_.keys()))
        raise OSError(msg)
    #\----------------------------------------------------------------------------/#



if __name__ == '__main__':

    parser = ArgumentParser(prog='sdown', formatter_class=RawTextHelpFormatter,
                            description=_description_)
    parser.add_argument('-f', '--fdir', type=str, metavar='', default='sat-data',
                        help='Directory where the files will be downloaded\n'\
                        'By default, files will be downloaded to \'sat-data\'\n \n')
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='Pass --verbose if status of your request should be reported frequently.\n \n'\
                        'This is disabled by default.\n \n')
    parser.add_argument('-r', '--run_demo', action='store_true',
                        help='Pass --run_demo if you would like to view a demonstration of this tool.\n \n')
    required = parser.add_argument_group('Required Arguments')
    required.add_argument('-d', '--date', type=str, metavar='', default=None,
                        help='Date for which you would like to download data. '\
                        'Use yyyymmdd format.\n'\
                        'Example: --date 20210404\n \n')
    required.add_argument('-t', '--start_date', type=str, metavar='', default=None,
                        help='The start date of the range of dates for which you would like to download data. '\
                        'Use yyyymmdd format.\n'\
                        'Example: --start_date 20210404\n \n')
    required.add_argument('-u', '--end_date', type=str, metavar='', default=None,
                        help='The end date of the range of dates for which you would like to download data. '\
                        'Use yyyymmdd format.\n'\
                        'Example: --end_date 20210414\n \n')
    required.add_argument('-e', '--extent', nargs='+', type=float, metavar='',
                        help='Extent of region of interest \nlon1 lon2 lat1 lat2 in West East South North format.\n'\
                        'Example:  --extent -10 -5 25 30\n \n')
    required.add_argument('-x', '--lons', nargs='+', type=float, metavar='',
                        help='The west-most and east-most longitudes of the region.\nAlternative to providing the first two terms in `extent`.\n'\
                        'Example:  --lons -10 -5\n \n')
    required.add_argument('-y', '--lats', nargs='+', type=float, metavar='',
                        help='The south-most and north-most latitudes of the region.\nAlternative to providing the last two terms in `extent`.\n'\
                        'Example:  --lats 25 30\n \n')
    required.add_argument('-p', '--products', type=str, nargs='+', metavar='',
                        help='Short prefix (case insensitive) for the product name.\n'\
                        'Example:  --products MOD02QKM\n'
                        '\nCurrently, the following products are supported:\n'\
                        'MOD02QKM:  Level 1b 250m (Terra) radiance product\n'\
                        'MYD02QKM:  Level 1b 250m (Aqua)  radiance product\n'\
                        'MOD02HKM:  Level 1b 500m (Terra) radiance product\n'\
                        'MYD02HKM:  Level 1b 500m (Aqua)  radiance product\n'\
                        'MOD021KM:  Level 1b 1km (Terra)  radiance product\n'\
                        'MYD021KM:  Level 1b 1km (Aqua)   radiance product\n'\
                        'MOD06_L2:  Level 2 (Terra) cloud product\n'\
                        'MYD06_L2:  Level 2 (Aqua)  cloud product\n'\
                        'MOD35_L2:  Level 2 (Terra) cloud mask product\n'\
                        'MYD35_L2:  Level 2 (Aqua)  cloud mask product\n'\
                        'MOD03   :  Solar/viewing geometry (Terra) product\n'\
                        'MYD03   :  Solar/viewing geometry (Aqua)  product\n'\
                        'MODRGB  :  True-Color RGB (Terra) imagery, useful for visuzliation\n'\
                        'MYDRGB  :  True-Color RGB (Aqua)  imagery, useful for visuzliation\n'\
                        'MCD43   :  Level 3 surface product MCD43A3\n'\
                        '\nTo download multiple products at a time:\n'\
                        '--products MOD021KM MYD02HKM MYD06_l2\n \n')

    args = parser.parse_args()

    if args.run_demo:
        date       = '20210714'
        start_date = None
        end_date   = None
        extent     = [-79.4, -71.1, 21.6, 25.8]
        lons       = None
        lats       = None
        fdir       = 'sat-data'
        products   = ['MODRGB', 'MYD02QKM']
        verbose    = 1

        sat0 = satellite_download(date=date,
                                  start_date=start_date,
                                  end_date=end_date,
                                  extent=extent,
                                  lons=lons,
                                  lats=lats,
                                  fdir_out=fdir,
                                  products=products,
                                  verbose=verbose)
    else:
        sat0 = satellite_download(date=args.date,
                                  start_date=args.start_date,
                                  end_date=args.end_date,
                                  extent=args.extent,
                                  lons=args.lons,
                                  lats=args.lats,
                                  fdir_out=args.fdir,
                                  products=args.products,
                                  verbose=args.verbose)
