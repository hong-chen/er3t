#!/usr/bin/env python

"""
This is a Python version of libRadtran/src/phase.c

!!!!!!!!!!!!!!!!!!!!!
! Incomplete        !
! Under development !
!!!!!!!!!!!!!!!!!!!!!

by Hong Chen (hong.chen.cu@gmail.com)
"""


import numpy as np
import er3t.common



def get_phase(
        wvl0 = 555.0,
        angles=np.concatenate((
            np.arange(  0.0,   2.0, 0.01),
            np.arange(  2.0,   5.0, 0.05),
            np.arange(  5.0,  10.0, 0.1),
            np.arange( 10.0,  15.0, 0.5),
            np.arange( 15.0, 176.0, 1.0),
            np.arange(176.0, 180.1, 0.25),
        )),
        fname_pha='%s/wc.sol.mie.cdf' % er3t.common.fdir_data_pha,
        ):

    try:
        from netCDF4 import Dataset
    except ImportError:
        msg = 'Error [phase]: Please install <netCDF4> to proceed.'
        raise ImportError(msg)

    f    = Dataset(fname_pha, 'r')
    wvl  = f.variables['wavelen'][:] * 1000.0
    cer  = f.variables['reff'][:]
    ssa  = f.variables['ssa'][:].T
    pmom = f.variables['pmom'][:].T[:, 0, :, :]
    asy  = pmom[1, :, :]/3.0

    Npoly, Ncer, Nwvl = pmom.shape

    Nang = angles.size
    pha = np.zeros((Nang, Ncer), dtype=np.float64)

    iwvl = np.argmin(np.abs(wvl-wvl0))

    for icer in range(Ncer):
        pmom0 = pmom[:, icer, iwvl]
        polys = pmom0/(2.0*np.arange(Npoly)+1.0)

        pha[:, icer] = legendre2phase(deltascaling=True)

        print(pmom0)


    print(Npoly, Ncer, Nwvl)
    print(pmom.shape)
    print(ssa.shape)
    print(asy.shape)

    """
    bin/phase -d -c -f <input of Na pmom>

    -d: use scattering angle in degrees instead of the cosine of the scattering angle mu
    -c: 1-column input
    -f: use delta scaling
    """
    # print(pmom[0, :])
    f.close()

    pass


def legendre2phase(
        polys,
        deltascaling=True,
        normalize=False,
        step=0.001,
        ):

    Npoly = polys.size
    if deltascaling:
        polys = (polys-polys[-1])/(1.0-polys[-1])

    polys *= (2.0*np.arange(Npoly)+1.0)

    if normalize:
        factors = 1.0/polys[0]
        polys *= factors

    angle = np.arange(0.0, 180.0+step, step)
    mu    = np.cos(np.deg2rad(angle))

    return angle, phase, phase_int

    pass


def mom2phase(mu, polys):
    """

        /** 
         * mom2phase
         *
         * calculate phase function from phase function moments 
         * 
         * @param x cos(theta)
         * @param f Legendre moment vector
         * @param L length of f
         * 
         * @return phase function at x
         *
         * @author Bernhard Mayer
         * @date   2009-06-29 Moved to miecalc.c from phase.c by Claudia Emde
         */
        double mom2phase (double x, double* f, int L) {

          int l = 0;

          double sum = 0;
          double pl = 0, plm1 = 0, plm2 = 0;

          plm2 = 1.0;
          plm1 = x;

          sum = plm2 * f[0] + plm1 * f[1];

          for (l = 2; l < L; l++) {
            pl = ((double)(2 * l - 1) * x * plm1 - (double)(l - 1) * plm2) / (double)l;

            sum += f[l] * pl;

            plm2 = plm1;
            plm1 = pl;
          }

          return sum;
        }


    """
    pass


def mom2phaseint(mu, polys):

    """
        /* calculate integral of the phase function from -1 to x from the phase function moments */
        static double mom2phaseint (double x, double* f, int L) {

          int l = 0;

          double sum = 0;
          double pl = 0, plm1 = 0, plm2 = 0;
          double pldash = 0, pldashm1 = 0, pldashm2 = 0;

          plm2 = 1;
          plm1 = x;

          pldashm2 = 0;
          pldashm1 = 1;

          sum = (1.0 - x) * f[0] + 0.5 * (1.0 - x * x) * f[1];

          for (l = 2; l < L; l++) {
            pl     = ((double)(2 * l - 1) * x * plm1 - (double)(l - 1) * plm2) / (double)l;
            pldash = ((double)(2 * l - 1) * (plm1 + x * pldashm1) - (double)(l - 1) * pldashm2) / (double)l;

            sum += f[l] * (1.0 - x * x) / (double)(l * (l + 1)) * pldash;

            plm2 = plm1;
            plm1 = pl;

            pldashm2 = pldashm1;
            pldashm1 = pldash;
          }

          return (2.0 - sum); /* we want -1 to x, not x to 1 */
        }

    """

    pass


if __name__ == '__main__':

    get_phase()
